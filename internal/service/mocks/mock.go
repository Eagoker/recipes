// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	models "github.com/Perceverance7/recipes/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(accessToken string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", accessToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), accessToken)
}

// MockRecipe is a mock of Recipe interface.
type MockRecipe struct {
	ctrl     *gomock.Controller
	recorder *MockRecipeMockRecorder
}

// MockRecipeMockRecorder is the mock recorder for MockRecipe.
type MockRecipeMockRecorder struct {
	mock *MockRecipe
}

// NewMockRecipe creates a new mock instance.
func NewMockRecipe(ctrl *gomock.Controller) *MockRecipe {
	mock := &MockRecipe{ctrl: ctrl}
	mock.recorder = &MockRecipeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecipe) EXPECT() *MockRecipeMockRecorder {
	return m.recorder
}

// CreateRecipe mocks base method.
func (m *MockRecipe) CreateRecipe(recipe models.Recipe, ingredients []models.Ingredient) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecipe", recipe, ingredients)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecipe indicates an expected call of CreateRecipe.
func (mr *MockRecipeMockRecorder) CreateRecipe(recipe, ingredients interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecipe", reflect.TypeOf((*MockRecipe)(nil).CreateRecipe), recipe, ingredients)
}

// DeleteRecipe mocks base method.
func (m *MockRecipe) DeleteRecipe(userID, recipeID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecipe", userID, recipeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecipe indicates an expected call of DeleteRecipe.
func (mr *MockRecipeMockRecorder) DeleteRecipe(userID, recipeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipe", reflect.TypeOf((*MockRecipe)(nil).DeleteRecipe), userID, recipeID)
}

// GetAllRecipes mocks base method.
func (m *MockRecipe) GetAllRecipes() (*[]models.SimplifiedRecipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRecipes")
	ret0, _ := ret[0].(*[]models.SimplifiedRecipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRecipes indicates an expected call of GetAllRecipes.
func (mr *MockRecipeMockRecorder) GetAllRecipes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRecipes", reflect.TypeOf((*MockRecipe)(nil).GetAllRecipes))
}

// GetRecipeById mocks base method.
func (m *MockRecipe) GetRecipeById(id int) (models.FullRecipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipeById", id)
	ret0, _ := ret[0].(models.FullRecipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipeById indicates an expected call of GetRecipeById.
func (mr *MockRecipeMockRecorder) GetRecipeById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipeById", reflect.TypeOf((*MockRecipe)(nil).GetRecipeById), id)
}

// GetRecipesByIngredients mocks base method.
func (m *MockRecipe) GetRecipesByIngredients(ingredients string) (*[]models.SimplifiedRecipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipesByIngredients", ingredients)
	ret0, _ := ret[0].(*[]models.SimplifiedRecipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipesByIngredients indicates an expected call of GetRecipesByIngredients.
func (mr *MockRecipeMockRecorder) GetRecipesByIngredients(ingredients interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipesByIngredients", reflect.TypeOf((*MockRecipe)(nil).GetRecipesByIngredients), ingredients)
}

// GetSavedRecipes mocks base method.
func (m *MockRecipe) GetSavedRecipes(userId int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavedRecipes", userId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavedRecipes indicates an expected call of GetSavedRecipes.
func (mr *MockRecipeMockRecorder) GetSavedRecipes(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavedRecipes", reflect.TypeOf((*MockRecipe)(nil).GetSavedRecipes), userId)
}

// SaveRecipeToProfile mocks base method.
func (m *MockRecipe) SaveRecipeToProfile(userId, recipeId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRecipeToProfile", userId, recipeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRecipeToProfile indicates an expected call of SaveRecipeToProfile.
func (mr *MockRecipeMockRecorder) SaveRecipeToProfile(userId, recipeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRecipeToProfile", reflect.TypeOf((*MockRecipe)(nil).SaveRecipeToProfile), userId, recipeId)
}

// UpdateRecipe mocks base method.
func (m *MockRecipe) UpdateRecipe(userID, recipeID int, updatedRecipe models.FullRecipe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipe", userID, recipeID, updatedRecipe)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecipe indicates an expected call of UpdateRecipe.
func (mr *MockRecipeMockRecorder) UpdateRecipe(userID, recipeID, updatedRecipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipe", reflect.TypeOf((*MockRecipe)(nil).UpdateRecipe), userID, recipeID, updatedRecipe)
}
